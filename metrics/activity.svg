<svg xmlns="http://www.w3.org/2000/svg" width="480" height="314" class="">
    <defs>
        <style/>
    </defs>
    <style>@keyframes animation-gauge{0%{stroke-dasharray:0 329}}@keyframes animation-rainbow{0%,to{color:#7f00ff;fill:#7f00ff}14%{color:#a933ff;fill:#a933ff}29%{color:#007fff;fill:#007fff}43%{color:#00ff7f;fill:#00ff7f}57%{color:#ff0;fill:#ff0}71%{color:#ff7f00;fill:#ff7f00}86%{color:red;fill:red}}svg{font-family:-apple-system,BlinkMacSystemFont,Segoe UI,Helvetica,Arial,sans-serif,Apple Color Emoji,Segoe UI Emoji;font-size:14px;color:#777}h2{margin:8px 0 2px;padding:0;color:#0366d6;font-weight:400;font-size:16px}h2 svg{fill:currentColor}section&gt;.field{margin-left:5px;margin-right:5px}.field{display:flex;align-items:center;margin-bottom:2px;white-space:nowrap}.field svg{margin:0 8px;fill:#959da5;flex-shrink:0}.row{display:flex;flex-wrap:wrap}.row section{flex:1 1 0}#metrics-end,.fill-width{width:100%}.chartist .ct-post{fill:rgba(127,127,127,.8)!important;color:rgba(127,127,127,.8)!important;font-size:9px;text-anchor:middle}.activity{margin-bottom:12px}.activity .field{width:100%;overflow:hidden;text-overflow:ellipsis;max-width:450px;white-space:nowrap;margin-bottom:0}.activity .field .content{flex-grow:1;text-overflow:ellipsis;overflow:hidden}.activity .issue,.activity .repo{display:inline;color:#58a6ff}.activity .code,code,span.code{background-color:#7777771f;border-radius:6px;color:#777;padding:1px 5px;font-size:80%;font-family:SFMono-Regular,Consolas,Liberation Mono,Menlo,monospace}.activity .code,span.code{margin:0 4px -3px}.activity .user{font-weight:600}.activity .details,.activity .timestamp{padding-left:38px;display:flex;flex-direction:column;font-size:13px;color:#666}.activity .timestamp{font-size:10px;margin-top:4px}.activity .details&gt;.comment{overflow:hidden;text-overflow:ellipsis;display:block;width:420px;margin-top:6px;border-left:3px solid #777777b2;padding-left:6px;display:-webkit-box;-webkit-line-clamp:2;-webkit-box-orient:vertical}.deleted{color:#da3633}code{display:inline-block}.blue{color:#58a6ff}:root{--color-calendar-graph-day-bg:#ebedf0;--color-calendar-graph-day-border:rgba(27,31,35,0.06);--color-calendar-graph-day-L1-bg:#9be9a8;--color-calendar-graph-day-L2-bg:#40c463;--color-calendar-graph-day-L3-bg:#30a14e;--color-calendar-graph-day-L4-bg:#216e39;--color-calendar-halloween-graph-day-L1-bg:#ffee4a;--color-calendar-halloween-graph-day-L2-bg:#ffc501;--color-calendar-halloween-graph-day-L3-bg:#fe9600;--color-calendar-halloween-graph-day-L4-bg:#03001c;--color-calendar-graph-day-L4-border:rgba(27,31,35,0.06);--color-calendar-graph-day-L3-border:rgba(27,31,35,0.06);--color-calendar-graph-day-L2-border:rgba(27,31,35,0.06);--color-calendar-graph-day-L1-border:rgba(27,31,35,0.06)}</style>
    <style/>
    <foreignObject x="0" y="0" width="100%" height="100%">
        <div xmlns="http://www.w3.org/1999/xhtml" xmlns:xlink="http://www.w3.org/1999/xlink" class="items-wrapper">
            <section>
                <h2 class="field">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" width="16" height="16">
                        <path fill-rule="evenodd" d="M0 8a8 8 0 1116 0v5.25a.75.75 0 01-1.5 0V8a6.5 6.5 0 10-13 0v5.25a.75.75 0 01-1.5 0V8zm5.5 4.25a.75.75 0 01.75-.75h3.5a.75.75 0 010 1.5h-3.5a.75.75 0 01-.75-.75zM3 6.75C3 5.784 3.784 5 4.75 5h6.5c.966 0 1.75.784 1.75 1.75v1.5A1.75 1.75 0 0111.25 10h-6.5A1.75 1.75 0 013 8.25v-1.5zm1.47-.53a.75.75 0 011.06 0l.97.97.97-.97a.75.75 0 011.06 0l.97.97.97-.97a.75.75 0 111.06 1.06l-1.5 1.5a.75.75 0 01-1.06 0L8 7.81l-.97.97a.75.75 0 01-1.06 0l-1.5-1.5a.75.75 0 010-1.06z"/>
                    </svg>
                    Recent activity
                </h2>
                <div class="row">
                    <section>
                        <div class="row fill-width">
                            <section class="activity">
                                <div class="field">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" width="16" height="16">
                                        <path fill-rule="evenodd" d="M1.5 2.75a.25.25 0 01.25-.25h12.5a.25.25 0 01.25.25v8.5a.25.25 0 01-.25.25h-6.5a.75.75 0 00-.53.22L4.5 14.44v-2.19a.75.75 0 00-.75-.75h-2a.25.25 0 01-.25-.25v-8.5zM1.75 1A1.75 1.75 0 000 2.75v8.5C0 12.216.784 13 1.75 13H3v1.543a1.457 1.457 0 002.487 1.03L8.061 13h6.189A1.75 1.75 0 0016 11.25v-8.5A1.75 1.75 0 0014.25 1H1.75zm5.03 3.47a.75.75 0 010 1.06L5.31 7l1.47 1.47a.75.75 0 01-1.06 1.06l-2-2a.75.75 0 010-1.06l2-2a.75.75 0 011.06 0zm2.44 0a.75.75 0 000 1.06L10.69 7 9.22 8.47a.75.75 0 001.06 1.06l2-2a.75.75 0 000-1.06l-2-2a.75.75 0 00-1.06 0z"/>
                                    </svg>
                                    <div class="content">
                                        Commented on
                                        <span class="issue">#335 Rewrite MOTD parser</span>
                                    </div>
                                </div>
                                <div class="details">
                                    <div>opened by PerchunPak in <span class="repo">py-mine/mcstatus</span></div>
                                    <div class="comment">
                                        Hmm, I think there has been some confusion between xterm-256 and ansi.

ANSI escape sequences are a standard that expresses how colors should be represented using some special escape sequences.
xterm-256 is just using ANSI escape sequences, expressing one of 256 colors (meaning these are 8-bit colors). This color range is often supported by almost all terminals.
However, some terminals, especially in the early ages, only gave us support for 16 colors (4-bit color)
Though, with modern terminals, they actually have truecolor or 24-bit color support, meaning you can use ANSI sequences that represent full standard RGB spectrum (being 3 bytes, 8-bits per each color (red, green, blue)).

For more details, see: 
Because of this, it the naming here doesn't really make sense. I think kevin mentioned xterm_256 color support, and I originally didn't really know what that was either so I just went with it and wrote it off as simply another convention. However as it's just a specific form of ANSI sequences, with the term itself being used to express this functionality on a terminal, it's really weird to have a
                                        <code>xterm_256</code>
                                        property here.
Instead, what we could do is either:

Make
                                        <code>ansi</code>
                                        a function, taking in an argument specifying either 24-bit color (truecolor, full RGB spectrum, what is currently being done in
                                        <code>xterm_256</code>
                                        ), 8-bit color (256 colors in total, what xterm_256 should've been, what's currently being done with
                                        <code>ansi</code>
                                        property, though without the fallback to 256), and perhaps also 4-bit color (only 16 colors in total, some TTYs still use this)
Make a bunch of properties:
                                        <code>ansi_24</code>
                                        ,
                                        <code>ansi_8</code>
                                        and
                                        <code>ansi_4</code>
                                        As to the downscaling, you've likely just miss-implemented the downscaling here, check  for a reference implementation in python (note that it's python 2 though, but it's mostly compatible).
Obviously, the loss of color quality will still be huge, but the colors do at least look similar. You certainly won't get a green color from blue. Check  to see all of the 256-color numbers that you can use (note that the first 0-15 colors are actually the 4-bit colors. Here's a quick reference if you need one:
                                    </div>
                                </div>
                                <div class="timestamp">11 Dec 2022, 22:56:54</div>
                            </section>
                        </div>
                        <div class="row fill-width">
                            <section class="activity">
                                <div class="field">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" width="16" height="16">
                                        <path fill-rule="evenodd" d="M2.5 1.75a.25.25 0 01.25-.25h8.5a.25.25 0 01.25.25v7.736a.75.75 0 101.5 0V1.75A1.75 1.75 0 0011.25 0h-8.5A1.75 1.75 0 001 1.75v11.5c0 .966.784 1.75 1.75 1.75h3.17a.75.75 0 000-1.5H2.75a.25.25 0 01-.25-.25V1.75zM4.75 4a.75.75 0 000 1.5h4.5a.75.75 0 000-1.5h-4.5zM4 7.75A.75.75 0 014.75 7h2a.75.75 0 010 1.5h-2A.75.75 0 014 7.75zm11.774 3.537a.75.75 0 00-1.048-1.074L10.7 14.145 9.281 12.72a.75.75 0 00-1.062 1.058l1.943 1.95a.75.75 0 001.055.008l4.557-4.45z"/>
                                    </svg>
                                    <div class="content">
                                        Reviewed
                                        <span class="issue">#335 Rewrite MOTD parser</span>
                                    </div>
                                </div>
                                <div class="details">
                                    <div>opened by PerchunPak in <span class="repo">py-mine/mcstatus</span></div>
                                </div>
                                <div class="timestamp">11 Dec 2022, 22:56:55</div>
                            </section>
                        </div>
                        <div class="row fill-width">
                            <section class="activity">
                                <div class="field">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" width="16" height="16">
                                        <path fill-rule="evenodd" d="M1.5 2.75a.25.25 0 01.25-.25h12.5a.25.25 0 01.25.25v8.5a.25.25 0 01-.25.25h-6.5a.75.75 0 00-.53.22L4.5 14.44v-2.19a.75.75 0 00-.75-.75h-2a.25.25 0 01-.25-.25v-8.5zM1.75 1A1.75 1.75 0 000 2.75v8.5C0 12.216.784 13 1.75 13H3v1.543a1.457 1.457 0 002.487 1.03L8.061 13h6.189A1.75 1.75 0 0016 11.25v-8.5A1.75 1.75 0 0014.25 1H1.75zm5.03 3.47a.75.75 0 010 1.06L5.31 7l1.47 1.47a.75.75 0 01-1.06 1.06l-2-2a.75.75 0 010-1.06l2-2a.75.75 0 011.06 0zm2.44 0a.75.75 0 000 1.06L10.69 7 9.22 8.47a.75.75 0 001.06 1.06l2-2a.75.75 0 000-1.06l-2-2a.75.75 0 00-1.06 0z"/>
                                    </svg>
                                    <div class="content">
                                        Commented on
                                        <span class="issue">#335 Rewrite MOTD parser</span>
                                    </div>
                                </div>
                                <div class="details">
                                    <div>opened by PerchunPak in <span class="repo">py-mine/mcstatus</span></div>
                                    <div class="comment">
                                        I'm aware that these hook methods don't modify the original
                                        <code>self.parsed</code>
                                        , I wouldn't have approved this otherwise, but the issue here isn't the original getting changed, the issue is that we might be popping wrong elements from the copied list.
                                        <b>Skipping elements problem</b>
                                        Let me try to demonstrate this with an actual example in python:

Notice that, in this example, since we popped out an element at index 2, the list was shrunk and element that was before on index 3 suddenly moved to index 2, to replace the popped element (as there can't be a gap in lists indices). This meant that as we iterated over the next element, the code thinks we've already got past index 2, and now gets the element at index 3, which is the number 5. But wait, we've now skipped number 4!
Yes, this is covered by the while loop above, re-running the code, so in the end we will go through all elements. That said though, this is still some very spooky logic of iterators that we're relying on here, and even though it actually somehow works, it doesn't mean that it's a good idea.
                                        <b>Another problem</b>
                                        Yet another problem that your approach has is that you run the hooks in a loop, without checking whether the hook has already removed that item. This means that one hook could end up removing the item you're at (say item at index 3), and another hook, that also evaluates this item as irrelevant will make yet another deletion of an item at index 3. This time however, as the original item was already deleted, and the item after took it's place, we've just removed the next item, that was never supposed to get removed in the first place.
Yes, this could be safe-guarded by having a bool flag indicating whether something was removed, and skipping the rest of the hooks for that element, however that then causes the while loop to repeat much more times, increasing the time this takes. Not to mention that the first problem I've pointed out still remains.
                                        <b>Runtime</b>
                                        The speed benefit doesn't really matter almost at all here, we're dealing with really small amount of elements, and the
                                        <code>simplified</code>
                                        method will almost certainly only be called once, if at all by the users. But anyway, let's take a look then.
Since the while loop in your example means that we're going to be iterating over the entire list of items more than once anyway, it will give us
                                        <code>O(x*n)</code>
                                        runtime, where
                                        <code>x</code>
                                        is the number of times we need to rerun until no further modifications are required. With my approach, we also get runtime of
                                        <code>O(x*n)</code>
                                        , but here,
                                        <code>x</code>
                                        is the number of simplification functions, as each function can run in
                                        <code>O(N)</code>
                                        time, and we run
                                        <code>x</code>
                                        such functions. 
This makes my approach scale similarly, and in some cases, it might even perform better as again, the functions only run once and collect all of the elements that were found as irrelevant and should be excluded, whereas with your approach, if there's too many cases where the rule keeps removing 1 element only, like say with: `Formatting, Formatting, Formatting, Color, hitting the doubled_colors hook 3 times to remove all 3 formattings before colors, requiring 3 iterations from just this one hook.
This alone might still seem like the approach you're using might be better, or at least, equal, but in actuality, your approach is much worse, due to the element popping on n-th index. This kind of pop means the list will need to move all of the remaining elements to the left. This gives us a worst case of another
                                        <code>O(N)</code>
                                        for this moving operation in these lists. Additionally, as python uses dynamically sized lists, the list might even get shrunk during this removal, which would mean moving all elements into another memory location, which has smaller allocation, and destroying the original allocation. This shrinking is always
                                        <code>O(N)</code>
                                        .
However with my approach, all that we're doing is collecting the indices that need to be removed, and while in my example I just sorted these indices and removed them one by one, a much faster approach would be to just loop over the list, and start adding all items into some other result list, skipping the indices we've obtained. This is then simply another single iteration over the motd items.
                                        <b>Extensibility</b>
                                        Additionally, extending by monkey patching is not something the users should have to do, in a well written OOP version, all the user should have to do is override a function/modify a variable. In this case, in my example, I've shown how we could just call the functions manually and union them with the
                                        <code>to_delete</code>
                                        set, however we could just as well have a class variable holding all of these functions, or something similar, to provide this extensibility.
                                    </div>
                                </div>
                                <div class="timestamp">11 Dec 2022, 22:00:48</div>
                            </section>
                        </div>
                    </section>
                </div>
            </section>
        </div>
        <div xmlns="http://www.w3.org/1999/xhtml" id="metrics-end"></div>
    </foreignObject>
</svg>