<svg xmlns="http://www.w3.org/2000/svg" width="480" height="313" class="">
    <defs>
        <style/>
    </defs>
    <style>@keyframes animation-gauge{0%{stroke-dasharray:0 329}}@keyframes animation-rainbow{0%,to{color:#7f00ff;fill:#7f00ff}14%{color:#a933ff;fill:#a933ff}29%{color:#007fff;fill:#007fff}43%{color:#00ff7f;fill:#00ff7f}57%{color:#ff0;fill:#ff0}71%{color:#ff7f00;fill:#ff7f00}86%{color:red;fill:red}}svg{font-family:-apple-system,BlinkMacSystemFont,Segoe UI,Helvetica,Arial,sans-serif,Apple Color Emoji,Segoe UI Emoji;font-size:14px;color:#777}h2{margin:8px 0 2px;padding:0;color:#0366d6;font-weight:400;font-size:16px}h2 svg{fill:currentColor}section&gt;.field{margin-left:5px;margin-right:5px}.field{display:flex;align-items:center;margin-bottom:2px;white-space:nowrap}.field svg{margin:0 8px;fill:#959da5;flex-shrink:0}.row{display:flex;flex-wrap:wrap}.row section{flex:1 1 0}#metrics-end,.fill-width{width:100%}.chartist .ct-post{fill:rgba(127,127,127,.8)!important;color:rgba(127,127,127,.8)!important;font-size:9px;text-anchor:middle}.activity{margin-bottom:12px}.activity .field{width:100%;overflow:hidden;text-overflow:ellipsis;max-width:450px;white-space:nowrap;margin-bottom:0}.activity .field .content{flex-grow:1;text-overflow:ellipsis;overflow:hidden}.activity .issue,.activity .repo{display:inline;color:#58a6ff}.activity .code,code,span.code{background-color:#7777771f;border-radius:6px;color:#777;padding:1px 5px;font-size:80%;font-family:SFMono-Regular,Consolas,Liberation Mono,Menlo,monospace}.activity .code,span.code{margin:0 4px -3px}.activity .user{font-weight:600}.activity .details,.activity .timestamp{padding-left:38px;display:flex;flex-direction:column;font-size:13px;color:#666}.activity .timestamp{font-size:10px;margin-top:4px}.activity .details&gt;.comment{overflow:hidden;text-overflow:ellipsis;display:block;width:420px;margin-top:6px;border-left:3px solid #777777b2;padding-left:6px;display:-webkit-box;-webkit-line-clamp:2;-webkit-box-orient:vertical}.people{padding:0 10px}code{display:inline-block}code[class^=language-]{white-space:pre-wrap;width:97%;margin-top:4px}.token.comment{color:#690}.token.punctuation{color:#8a93a8}.token.keyword{color:#b44418}.token.string{color:#2777aa}.token.property{color:#48428a}.token.builtin,.token.operator{color:#106cbc}.space{margin-left:7px}:root{--color-calendar-graph-day-bg:#ebedf0;--color-calendar-graph-day-border:rgba(27,31,35,0.06);--color-calendar-graph-day-L1-bg:#9be9a8;--color-calendar-graph-day-L2-bg:#40c463;--color-calendar-graph-day-L3-bg:#30a14e;--color-calendar-graph-day-L4-bg:#216e39;--color-calendar-halloween-graph-day-L1-bg:#ffee4a;--color-calendar-halloween-graph-day-L2-bg:#ffc501;--color-calendar-halloween-graph-day-L3-bg:#fe9600;--color-calendar-halloween-graph-day-L4-bg:#03001c;--color-calendar-graph-day-L4-border:rgba(27,31,35,0.06);--color-calendar-graph-day-L3-border:rgba(27,31,35,0.06);--color-calendar-graph-day-L2-border:rgba(27,31,35,0.06);--color-calendar-graph-day-L1-border:rgba(27,31,35,0.06)}</style>
    <style/>
    <foreignObject x="0" y="0" width="100%" height="100%">
        <div xmlns="http://www.w3.org/1999/xhtml" xmlns:xlink="http://www.w3.org/1999/xlink" class="items-wrapper">
            <section>
                <h2 class="field">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" width="16" height="16">
                        <path fill-rule="evenodd" d="M0 8a8 8 0 1116 0v5.25a.75.75 0 01-1.5 0V8a6.5 6.5 0 10-13 0v5.25a.75.75 0 01-1.5 0V8zm5.5 4.25a.75.75 0 01.75-.75h3.5a.75.75 0 010 1.5h-3.5a.75.75 0 01-.75-.75zM3 6.75C3 5.784 3.784 5 4.75 5h6.5c.966 0 1.75.784 1.75 1.75v1.5A1.75 1.75 0 0111.25 10h-6.5A1.75 1.75 0 013 8.25v-1.5zm1.47-.53a.75.75 0 011.06 0l.97.97.97-.97a.75.75 0 011.06 0l.97.97.97-.97a.75.75 0 111.06 1.06l-1.5 1.5a.75.75 0 01-1.06 0L8 7.81l-.97.97a.75.75 0 01-1.06 0l-1.5-1.5a.75.75 0 010-1.06z"/>
                    </svg>
                    Recent activity
                </h2>
                <div class="row">
                    <section>
                        <div class="row fill-width">
                            <section class="activity">
                                <div class="field">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" width="16" height="16">
                                        <path fill-rule="evenodd" d="M2.5 1.75a.25.25 0 01.25-.25h8.5a.25.25 0 01.25.25v7.736a.75.75 0 101.5 0V1.75A1.75 1.75 0 0011.25 0h-8.5A1.75 1.75 0 001 1.75v11.5c0 .966.784 1.75 1.75 1.75h3.17a.75.75 0 000-1.5H2.75a.25.25 0 01-.25-.25V1.75zM4.75 4a.75.75 0 000 1.5h4.5a.75.75 0 000-1.5h-4.5zM4 7.75A.75.75 0 014.75 7h2a.75.75 0 010 1.5h-2A.75.75 0 014 7.75zm11.774 3.537a.75.75 0 00-1.048-1.074L10.7 14.145 9.281 12.72a.75.75 0 00-1.062 1.058l1.943 1.95a.75.75 0 001.055.008l4.557-4.45z"/>
                                    </svg>
                                    <div class="content">
                                        Reviewed
                                        <span class="issue">#439 Fix PMMP Bedrock Servers Query</span>
                                    </div>
                                </div>
                                <div class="details">
                                    <div>opened by AlphaBaqpla in <span class="repo">py-mine/mcstatus</span></div>
                                </div>
                                <div class="timestamp">20 Dec 2022, 18:35:34</div>
                            </section>
                        </div>
                        <div class="row fill-width">
                            <section class="activity">
                                <div class="field">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" width="16" height="16">
                                        <path fill-rule="evenodd" d="M1.5 2.75a.25.25 0 01.25-.25h12.5a.25.25 0 01.25.25v8.5a.25.25 0 01-.25.25h-6.5a.75.75 0 00-.53.22L4.5 14.44v-2.19a.75.75 0 00-.75-.75h-2a.25.25 0 01-.25-.25v-8.5zM1.75 1A1.75 1.75 0 000 2.75v8.5C0 12.216.784 13 1.75 13H3v1.543a1.457 1.457 0 002.487 1.03L8.061 13h6.189A1.75 1.75 0 0016 11.25v-8.5A1.75 1.75 0 0014.25 1H1.75zm5.03 3.47a.75.75 0 010 1.06L5.31 7l1.47 1.47a.75.75 0 01-1.06 1.06l-2-2a.75.75 0 010-1.06l2-2a.75.75 0 011.06 0zm2.44 0a.75.75 0 000 1.06L10.69 7 9.22 8.47a.75.75 0 001.06 1.06l2-2a.75.75 0 000-1.06l-2-2a.75.75 0 00-1.06 0z"/>
                                    </svg>
                                    <div class="content">
                                        Commented on
                                        <span class="issue">#335 Rewrite MOTD parser</span>
                                    </div>
                                </div>
                                <div class="details">
                                    <div>opened by PerchunPak in <span class="repo">py-mine/mcstatus</span></div>
                                    <div class="comment">
                                        NOTE: My first comment in this review suggest to remove these transformer classes entirely, making this suggestion irrelevant. Though if for some reason we agreed that they shouldn't be removed, this applies.
These should just be the default values, not fallbacks in the properties, and the initialization of these transformer classes should be happening in
                                        <code>__init__</code>
                                        , as initializations can take a lot of time in python, doing so before each call is kind of weird.
If this is an attempt at saving some memory and time by not having instances of all of these transformer classes stored in the motd class, then these properties should be cached. So that the instance is only created once, when the transformation is first requested, but when it's requested again, it will use the cached already created instance.
Still though, since we treat the transformed values as properties, it implies that they should be very quick to compute. In any other case, we should instead be using functions, to signify that the user should instead store that result, as it's computation may take a while. And in this case, I'm starting to think that functions might be a better idea here with all of the complexity under the hood.
                                    </div>
                                </div>
                                <div class="timestamp">20 Dec 2022, 18:21:21</div>
                            </section>
                        </div>
                        <div class="row fill-width">
                            <section class="activity">
                                <div class="field">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" width="16" height="16">
                                        <path fill-rule="evenodd" d="M1.5 2.75a.25.25 0 01.25-.25h12.5a.25.25 0 01.25.25v8.5a.25.25 0 01-.25.25h-6.5a.75.75 0 00-.53.22L4.5 14.44v-2.19a.75.75 0 00-.75-.75h-2a.25.25 0 01-.25-.25v-8.5zM1.75 1A1.75 1.75 0 000 2.75v8.5C0 12.216.784 13 1.75 13H3v1.543a1.457 1.457 0 002.487 1.03L8.061 13h6.189A1.75 1.75 0 0016 11.25v-8.5A1.75 1.75 0 0014.25 1H1.75zm5.03 3.47a.75.75 0 010 1.06L5.31 7l1.47 1.47a.75.75 0 01-1.06 1.06l-2-2a.75.75 0 010-1.06l2-2a.75.75 0 011.06 0zm2.44 0a.75.75 0 000 1.06L10.69 7 9.22 8.47a.75.75 0 001.06 1.06l2-2a.75.75 0 000-1.06l-2-2a.75.75 0 00-1.06 0z"/>
                                    </svg>
                                    <div class="content">
                                        Commented on
                                        <span class="issue">#335 Rewrite MOTD parser</span>
                                    </div>
                                </div>
                                <div class="details">
                                    <div>opened by PerchunPak in <span class="repo">py-mine/mcstatus</span></div>
                                    <div class="comment">
                                        I don't really like this kind of approach. If this is meant as a way for the user to "easily" override these and add their custom approaches for transforming the motd, why do this in such a convoluted way when python already has a proper way of doing it, being to make a child class and just override that specific property.
Also, most of these classes just rely on some transformer base class and just specify some class variables to define how it works. That's really complex and convoluted. These transformers are hardly something that requires classes, they could just as easily be simple functions.
If we want to avoid repetition, why not do it sensibly and just create a private function like:
                                        <code class="language-multiline language-python" xml:space="preserve"><span class="token keyword">def</span> <span class="token function">_ansi_transform</span><span class="token punctuation">(</span>bedrock_ansi_map<span class="token punctuation">:</span> <span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span> java_ansi_map<span class="token punctuation">:</span> <span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code>
                                        and call that in the individual ansi properties, with appropriate args.
Also, this apparent "ease of overriding" with this approach is not even necessary here.  After all, these based on some pretty well defined standards, so as long as they're working correctly on the library side, changing how they work shouldn't be needed, and we shouldn't advise it. 

However, I do agree that it the transformer classes would make it easier for people to create their custom transformations, but is that really something worth introducing this much complexity into the code base? 
I doubt that most people will end up needing more than the minecraft and plaintext formattings. The ansi formattings are nice to have though, if someone wants colored text in terminal, and the html ones can obviously be quite useful too, however there isn't really that much else you could need. So, if almost no one will actually need this, why even have support for it?
If we really want this, I still don't think class variables like this are the way to go. In that case, to truly make this modular and extensible, we should go with one of 2 approaches:

Having a
                                        <code>transform</code>
                                        method on
                                        <code>Motd</code>
                                        class, that takes in a
                                        <code>Transformer</code>
                                        instance and returns a string.
Having a
                                        <code>transform</code>
                                        method on
                                        <code>Transformer</code>
                                        class, that takes in a
                                        <code>Motd</code>
                                        instance and returns a string.

This would mean no properties or anything like this, as we want to have support for any arbitrary transformer, and if the user would want to use say the plain text one, then they should pick that transformer and use it with the appropriate Motd. This would also take away a lot of the clutter from the motd class. Also, in this case, we'd certainly want to make motd a package, and split it up into
                                        <code>motd/transformers.py</code>
                                        and
                                        <code>motd/motd.py</code>
                                        or similar.
However this approach would be much more annoying for the user, than just accessing it via a property. For that reason, I don't really think it's justified, especially since again, I don't think most people will actually have the need to create their own transformers, so my first suggestion holds.
                                    </div>
                                </div>
                                <div class="timestamp">20 Dec 2022, 18:19:32</div>
                            </section>
                        </div>
                    </section>
                </div>
            </section>
        </div>
        <div xmlns="http://www.w3.org/1999/xhtml" id="metrics-end"></div>
    </foreignObject>
</svg>